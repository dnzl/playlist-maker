import { useCallback, useMemo } from "react";
import { PlaylistSelection, TrackSelection } from "../types";
import {
  SpotifyArtist,
  useCreatePlaylistMutation,
  useAddTracksToPlaylistMutation,
  getCurrentUserId,
} from "../app/spotifyService";

type UseSetlistCreatorParams = {
  selectedTracks?: TrackSelection;
  selectedPlaylist?: PlaylistSelection;
  selectedArtist?: SpotifyArtist;
};

export const useSetlistCreator = ({
  selectedTracks,
  selectedPlaylist,
  selectedArtist,
}: UseSetlistCreatorParams) => {
  const [createPlaylistMutation] = useCreatePlaylistMutation();
  const [addTracksToPlaylistMutation] = useAddTracksToPlaylistMutation();

  const selectedTracksIds = useMemo(
    () =>
      (selectedTracks &&
        Object.keys(selectedTracks)
          .map(songId =>
            selectedTracks[songId].trackId !== "none" ? selectedTracks[songId].trackId : null
          )
          .filter(v => v)) ??
      [],
    [selectedTracks]
  );

  const playlistSelection = useMemo(() => {
    if (selectedPlaylist?.type === "new") {
      if (!selectedPlaylist?.name?.trim().length) {
        return undefined;
      }
      return { value: "new", name: "Create new playlist" };
    }

    return {
      value: selectedPlaylist?.selection?.id ?? "",
      name: selectedPlaylist?.selection?.name ?? "",
    };
  }, [selectedPlaylist]);

  const createPlaylist = useCallback(async () => {
    console.log("createPlaylist", { selectedTracksIds, selectedPlaylist, selectedArtist });
    try {
      const userId = getCurrentUserId();
      if (!userId) {
        console.error("User ID not available");
        return;
      }

      // Get track URIs from the selected tracks
      const trackURIs = selectedTracksIds.map(id => `spotify:track:${id}`);

      if (trackURIs.length === 0) {
        console.error("No tracks selected");
        return;
      }

      let playlistId: string;

      // Create a new playlist or use an existing one
      if (selectedPlaylist?.type === "new") {
        if (!selectedPlaylist?.name?.trim()) {
          console.error("Playlist name is required");
          return;
        }

        // Create a new playlist
        const playlistName = selectedPlaylist.name;
        const playlistDescription = selectedArtist
          ? `Setlist for ${selectedArtist.name}`
          : "Autogenerated Setlist";

        const result = await createPlaylistMutation({
          userId,
          name: playlistName,
          description: playlistDescription,
        }).unwrap();

        playlistId = result.id;
      } else if (selectedPlaylist?.selection?.id) {
        // Use existing playlist
        playlistId = selectedPlaylist.selection.id;
      } else {
        console.error("No playlist selected");
        return;
      }

      // Add tracks to the playlist
      if (playlistId && trackURIs.length > 0) {
        await addTracksToPlaylistMutation({
          playlistId,
          tracksURIs: trackURIs,
        }).unwrap();

        console.log("Playlist created successfully!", {
          playlistId,
          trackCount: trackURIs.length,
        });
      }
    } catch (error) {
      console.error("Error creating playlist:", error);
    }
  }, [
    selectedTracksIds,
    selectedPlaylist,
    selectedArtist,
    createPlaylistMutation,
    addTracksToPlaylistMutation,
  ]);

  return {
    createPlaylist,
    songSelection: {
      value: selectedTracksIds.join(","),
      name: `${selectedTracksIds.length} songs`,
    },
    playlistSelection,
    artistSelection: selectedArtist && {
      value: selectedArtist?.id ?? "",
      name: selectedArtist?.name ?? "",
    },
  };
};
